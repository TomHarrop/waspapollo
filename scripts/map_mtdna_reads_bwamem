#!/usr/bin/env bash
set -eu

FASTA="dataraw/vvmtdna/Vvul-mtDNA.fasta"

# make temporary output folder
read_folder="dataraw/NZGL01162"
outdir="rnaseq/vvmtdna"
if [[ ! -e "${outdir}" ]]; then
  mkdir -p "${outdir}"
fi
tmp_dir="rnaseq/tmp"
if [[ ! -e "${tmp_dir}" ]]; then
  mkdir -p "${tmp_dir}"
fi
printf "[ %s: Using tmpdir %s ]\n" "$(date)" "${tmp_dir}"

# make bwamem index
# bwa index "${FASTA}" &

# loop over sample_ids in csv file and interleave
while IFS="," read -r sample r1 r2
do
    r1_file="${read_folder}/${r1}"
    r2_file="${read_folder}/${r2}"
    repaired_reads="${tmp_dir}/${sample}.fastq.gz"
    cmd=( bin/bbmap/repair.sh
              in="${r1_file}"
              in2="${r2_file}"
              out="${repaired_reads}"
              repair )

    printf "[ %s: Repairing ]\n" "$(date)"
    printf "r1_file:\t%s\n" "${r1_file}"
    printf "r2_file:\t%s\n" "${r2_file}"
    printf "repaired_reads:\t%s\n" "${repaired_reads}"
    # "${cmd[@]}"
done < dataraw/rnaseq_sample_ids.csv

# find interleaved read files
repaired_files=()
while IFS="" read -r -d $'\0'; do
    repaired_files+=("$REPLY")
done < <(find "${tmp_dir}/" \
         -name "*.fastq.gz" -print0)

# join reads
printf "[ %s: Merging ]\n" "$(date)"
printf "%s\n" "${repaired_files[@]}"
merged_reads="${tmp_dir}/merged.fastq.gz"
# cat "${repaired_files[@]}" > "${merged_reads}"

# map reads and output BAM
printf "[ %s: Aligning ]\n" "$(date)"
aligned_bam="${tmp_dir}/aln.bam"
subsampled_bam="${tmp_dir}/subsampled.bam"
sorted_bam="${outdir}/sorted.bam"
bwa mem -t 15 -p \
    "${FASTA}" \
    "${merged_reads}" | \
samtools view --threads 5 -F 2312 \
    -o "${aligned_bam}" \
    -bT "${FASTA}" 

# subsample the alignments
printf "[ %s: Subsampling alignments ]\n" "$(date)"
samtools view --threads 20 -s 0.01 \
    -o "${subsampled_bam}" \
    "${aligned_bam}"

# sort the samfile to BAM
printf "[ %s: Sorting BAMfile ]\n" "$(date)"

samtools sort \
    -l 9 \
    -o "${sorted_bam}" \
    -@ 15 \
    "${subsampled_bam}"

printf "[ %s: Indexing BAMfile ]\n" "$(date)"
samtools index "${sorted_bam}"

exit 0
